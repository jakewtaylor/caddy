{"version":3,"file":"caddy.umd.js","sources":["../caddy.js"],"sourcesContent":["window.CADDY_INSTANCE_COUNT = window.CADDY_INSTANCE_COUNT || 0;\n\nexport class Caddy {\n    /**\n     * Constructs the class.\n     *\n     * @param {object} [options]\n     */\n    constructor (options) {\n        // Build up the options\n        this.options = this.buildOptions(options);\n\n        // Determine the key\n        const { key } = this.options;\n        this.key = key ? key : `caddy${++window.CADDY_INSTANCE_COUNT}`;\n\n        // Boot the store\n        const { driver } = this.options;\n        const store = driver.getItem(this.key);\n        this.store = store ? JSON.parse(store) : {};\n\n        // Initiate our subscribers as an empty array\n        this.subscribers = [];\n\n        // Initiate our listeners as an empty object\n        this.listeners = {};\n    }\n\n    /**\n     * Builds the options object.\n     *\n     * @param {object} options - The user provided options.\n     *\n     * @returns {object}\n     */\n    buildOptions (options) {\n        return {\n            key: null,\n            driver: window.localStorage,\n            ...options,\n        };\n    }\n\n    /**\n     * Takes the current store object and persists it using the configured driver.\n     */\n    persistStore () {\n        const { driver } = this.options;\n\n        this.prevStore = JSON.parse(driver.getItem(this.key));\n        driver.setItem(this.key, JSON.stringify(this.store));\n\n        this.notifySubscribers();\n        this.notifyListeners();\n    }\n\n    /**\n     * Calls every subscriber.\n     */\n    notifySubscribers () {\n        this.subscribers.forEach((subscriber) => {\n            subscriber(this.store);\n        });\n    }\n\n    /**\n     * Calls every appropriate listener.\n     */\n    notifyListeners () {\n        // Get the keys of both the previous and current stores.\n        const prevKeys = Object.keys(this.prevStore || {});\n        const currentKeys = Object.keys(this.store);\n\n        // Go through every current key\n        currentKeys.forEach(key => {\n            // Determine if the key is new or different\n            const isNew = !prevKeys.includes(key);\n            const isDifferent = this.prevStore[key] !== this.store[key];\n\n            // If so, loop through every associated listener and call\n            // it with the latest value.\n            if (isNew || isDifferent) {\n                const listeners = this.listeners[key] || [];\n\n                listeners.forEach((listener) => {\n                    listener(this.store[key]);\n                });\n            }\n        });\n    }\n\n    /**\n     * Sets an item in the store.\n     *\n     * @param {string} key - The key to store the value against.\n     * @param {*} val - The value to store.\n     *\n     * @returns {Caddy}\n     */\n    set (key, val) {\n        this.store[key] = val;\n        this.persistStore();\n\n        return this;\n    }\n\n    /**\n     * Gets an item from the store.\n     *\n     * @param {string} key - The key to retrieve.\n     *\n     * @returns {*}\n     */\n    get (key) {\n        return this.store[key];\n    }\n\n    /**\n     * Determines if the store has a given key.\n     *\n     * @param {string} key - The key to check.\n     *\n     * @returns {boolean}\n     */\n    has (key) {\n        return Object.prototype.hasOwnProperty.call(this.store, key);\n    }\n\n    /**\n     * Empties the entire store.\n     *\n     * @returns {Caddy}\n     */\n    flush () {\n        this.store = {};\n        this.persistStore();\n\n        return this;\n    }\n\n    /**\n     * Pushes an item into an array stored at the given key.\n     *\n     * @param {string} key - The key where the array is stored.\n     * @param {*} val - The value to push into the array.\n     *\n     * @returns {Caddy}\n     *\n     * @throws Will throw an error if the value at the given key is not an array.\n     */\n    push (key, val) {\n        // If there is nothing at the given key, we can just create a new array\n        if (!this.has(key)) {\n            return this.set(key, [val]);\n        }\n\n        // If the existing value isn't an array, we need to throw an error\n        if (!Array.isArray(this.get(key))) {\n            throw new Error('Failed trying to push to non-array.');\n        }\n\n        // Push the item into the array and save\n        this.store[key].push(val);\n        this.persistStore();\n\n        return this;\n    }\n\n    /**\n     * Registers a callback that will be called with the entire store\n     * whenever any sort of change is made.\n     *\n     * @param {function} subscriber - The callback to register as a subscriber.\n     *\n     * @returns {Caddy}\n     */\n    subscribe (subscriber) {\n        this.subscribers.push(subscriber);\n\n        return this;\n    }\n\n    /**\n     * Registers a listener for a given key that will be called whenever\n     * the value *changes*. If the new value is === the old value, the\n     * listener will not be called.\n     *\n     * @param {string} key - The key to listen to.\n     * @param {function} listener - The listener function to call.\n     *\n     * @returns {Caddy}\n     */\n    listen (key, listener) {\n        if (!this.listeners[key]) {\n            this.listeners[key] = [];\n        }\n\n        this.listeners[key].push(listener);\n\n        return this;\n    }\n}\n\n"],"names":["window","CADDY_INSTANCE_COUNT","Caddy","constructor","options","this","buildOptions","key","store","getItem","JSON","parse","subscribers","listeners","Object","driver","localStorage","persistStore","prevStore","setItem","stringify","notifySubscribers","notifyListeners","forEach","subscriber","prevKeys","keys","includes","listener","set","val","get","has","prototype","hasOwnProperty","call","flush","push","Array","isArray","Error","subscribe","listen"],"mappings":"6KAAAA,OAAOC,qBAAuBD,OAAOC,sBAAwB,MAEhDC,EAMTC,SAAaC,QAEJA,QAAUC,KAAKC,aAAaF,QAI5BG,IADWF,KAAKD,wBACYJ,OAAOC,yBAIlCO,EADaH,KAAKD,eACHK,QAAQJ,KAAKE,UAC7BC,MAAQA,EAAQE,KAAKC,MAAMH,GAAS,QAGpCI,YAAc,QAGdC,UAAY,IAUrBP,YAAAA,sBAAcF,UACHU,kBACHP,IAAK,KACLQ,OAAQf,OAAOgB,kBAQvBC,YAAAA,8BACuBZ,KAAKD,oBAEnBc,UAAYR,KAAKC,MAAMI,EAAON,QAAQJ,KAAKE,MAChDQ,EAAOI,QAAQd,KAAKE,IAAKG,KAAKU,UAAUf,KAAKG,aAExCa,yBACAC,mBAMTD,YAAAA,6CACST,YAAYW,iBAASC,GACtBA,EAAWnB,EAAKG,UAOxBc,YAAAA,sCAEUG,EAAWX,OAAOY,KAAKrB,KAAKa,WAAa,IAC3BJ,OAAOY,KAAKrB,KAAKG,OAGzBe,iBAAQhB,GAEDkB,EAASE,SAASpB,IACbF,EAAKa,UAAUX,KAASF,EAAKG,MAAMD,KAKjCF,EAAKQ,UAAUN,IAAQ,IAE/BgB,iBAASK,KACNvB,EAAKG,MAAMD,SAcpCsB,YAAAA,aAAKtB,EAAKuB,eACDtB,MAAMD,GAAOuB,OACbb,eAEEZ,MAUX0B,YAAAA,aAAKxB,UACMF,KAAKG,MAAMD,IAUtByB,YAAAA,aAAKzB,UACMO,OAAOmB,UAAUC,eAAeC,KAAK9B,KAAKG,MAAOD,IAQ5D6B,YAAAA,6BACS5B,MAAQ,QACRS,eAEEZ,MAaXgC,YAAAA,cAAM9B,EAAKuB,OAEFzB,KAAK2B,IAAIzB,UACHF,KAAKwB,IAAItB,EAAK,CAACuB,QAIrBQ,MAAMC,QAAQlC,KAAK0B,IAAIxB,UAClB,IAAIiC,MAAM,mDAIfhC,MAAMD,GAAK8B,KAAKP,QAChBb,eAEEZ,MAWXoC,YAAAA,mBAAWjB,eACFZ,YAAYyB,KAAKb,GAEfnB,MAaXqC,YAAAA,gBAAQnC,EAAKqB,UACJvB,KAAKQ,UAAUN,UACXM,UAAUN,GAAO,SAGrBM,UAAUN,GAAK8B,KAAKT,GAElBvB"}